{"version":3,"sources":["../src/index.js"],"names":["levels","specialRegexpChars","DebugValueType","RegExp","createTestFunctionFromRegexpString","value","endsWith","Error","regexp","slice","test","string","createTestFunctionFromValue","startsWith","createFindDebugLevel","debugValue","wilcard","debugValues","skips","Array","isArray","trim","push","split","forEach","substr","length","minLevel","ALL","key","some","skip"],"mappings":"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","file":"index.js","sourcesContent":["import levels from 'nightingale-levels';\n\nconst specialRegexpChars = /[\\\\^$+?.()|[\\]{}]/;\n\ntype DebugValueType = string | RegExp | Array<string | RegExp>;\n\nconst createTestFunctionFromRegexpString = (value) => {\n  if (!value.endsWith('/')) throw new Error('Invalid RegExp DEBUG value');\n  const regexp = new RegExp(value.slice(1, -1));\n  return string => regexp.test(string);\n};\n\nconst createTestFunctionFromValue = (value) => {\n  if (value.endsWith(':*')) {\n    value = value.slice(0, -2);\n    return string => string.startsWith(value);\n  }\n\n  return string => string === value;\n};\n\nexport default function createFindDebugLevel(debugValue: ?DebugValueType) {\n  debugValue = (debugValue || '');\n\n  let wilcard = false;\n  const debugValues = [];\n  const skips = [];\n\n  if (!Array.isArray(debugValue)) {\n    debugValue = debugValue.trim();\n\n    if (debugValue.startsWith('/')) {\n      debugValues.push(createTestFunctionFromRegexpString(debugValue));\n      debugValue = null;\n    } else {\n      debugValue = debugValue.split(/[\\s,]+/);\n    }\n  }\n\n  if (debugValue) {\n    debugValue.forEach(value => {\n      if (specialRegexpChars.test(value)) {\n        throw new Error(`Invalid debug value: \"${value}\" (contains special chars)`);\n      }\n\n      if (!value) return;\n\n      if (value === '*') {\n        wilcard = true;\n        return;\n      }\n\n      if (value.startsWith('-')) {\n        skips.push(createTestFunctionFromValue(value.substr(1)));\n      } else if (!wilcard) {\n        debugValues.push(createTestFunctionFromValue(value));\n      }\n    });\n  }\n\n  if (wilcard) {\n    if (skips.length === 0) {\n      return (minLevel) => levels.ALL;\n    } else {\n      return (minLevel, key) => (\n        skips.some(skip => skip(key)) ? minLevel : levels.ALL\n      );\n    }\n  }\n\n  if (debugValues.length === 0) {\n    return (minLevel: number) => minLevel;\n  }\n\n  return (minLevel, key) => {\n    if (minLevel === levels.ALL || !key) {\n      return minLevel;\n    }\n\n    if (debugValues.some(debugValue => debugValue(key))) {\n      return skips.some(skip => skip(key)) ? minLevel : levels.ALL;\n    }\n\n    return minLevel;\n  };\n}\n"]}